-- Unit tests for superscripts functionality
local unicode = require('unicode-math.backends.unicode')

describe("Superscripts", function()
    describe("Basic Superscripts", function()
        it("should convert simple numeric superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^2"), "x²")
            assert_equal(unicode.convert_to_unicode("x^3"), "x³")
            assert_equal(unicode.convert_to_unicode("y^4"), "y⁴")
            assert_equal(unicode.convert_to_unicode("z^0"), "z⁰")
        end)
        
        it("should convert braced numeric superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{2}"), "x²")
            assert_equal(unicode.convert_to_unicode("y^{10}"), "y¹⁰")
            assert_equal(unicode.convert_to_unicode("z^{123}"), "z¹²³")
        end)
        
        it("should convert letter superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^n"), "xⁿ")
            assert_equal(unicode.convert_to_unicode("a^i"), "aⁱ")
            assert_equal(unicode.convert_to_unicode("b^x"), "bˣ")
            assert_equal(unicode.convert_to_unicode("f^y"), "fʸ")
        end)
        
        it("should convert braced letter superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{n}"), "xⁿ")
            assert_equal(unicode.convert_to_unicode("a^{abc}"), "aᵃᵇᶜ")
            assert_equal(unicode.convert_to_unicode("f^{xyz}"), "fˣʸᶻ")
        end)
        
        it("should handle superscript operators", function()
            assert_equal(unicode.convert_to_unicode("x^{+}"), "x⁺")
            assert_equal(unicode.convert_to_unicode("x^{-}"), "x⁻")
            assert_equal(unicode.convert_to_unicode("x^{=}"), "x⁼")
            assert_equal(unicode.convert_to_unicode("x^{()}"), "x⁽⁾")
        end)
    end)
    
    describe("Greek Letter Superscripts", function()
        it("should convert pi superscripts", function()
            assert_equal(unicode.convert_to_unicode("e^{\\pi}"), "eᵖⁱ")
            assert_equal(unicode.convert_to_unicode("x^{i\\pi}"), "xⁱᵖⁱ")
        end)
        
        it("should convert alpha superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{\\alpha}"), "xᵅ")
        end)
        
        it("should convert beta superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{\\beta}"), "xᵝ")
        end)
        
        it("should convert gamma superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{\\gamma}"), "xᵞ")
        end)
        
        it("should convert theta superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{\\theta}"), "xᶿ")
        end)
        
        it("should convert phi superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{\\phi}"), "xᶲ")
        end)
    end)
    
    describe("Direct Greek Superscripts", function()
        it("should handle already converted Greek letters", function()
            assert_equal(unicode.convert_to_unicode("σ^2"), "σ²")
            assert_equal(unicode.convert_to_unicode("π^3"), "π³")
            assert_equal(unicode.convert_to_unicode("α^n"), "αⁿ")
            assert_equal(unicode.convert_to_unicode("β^i"), "βⁱ")
            assert_equal(unicode.convert_to_unicode("γ^x"), "γˣ")
            assert_equal(unicode.convert_to_unicode("θ^2"), "θ²")
            assert_equal(unicode.convert_to_unicode("φ^k"), "φᵏ")
        end)
    end)
    
    describe("Exponential Notation", function()
        it("should handle e^{expression} format", function()
            assert_equal(unicode.convert_to_unicode("e^{x}"), "e^ˣ")
            assert_equal(unicode.convert_to_unicode("e^{2x}"), "e^²ˣ")
            assert_equal(unicode.convert_to_unicode("e^{-x}"), "e^⁻ˣ")
            assert_equal(unicode.convert_to_unicode("e^{iπ}"), "e^ⁱᵖⁱ")
        end)
    end)
    
    describe("Complex Superscripts", function()
        it("should handle mixed alphanumeric superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{2n}"), "x²ⁿ")
            assert_equal(unicode.convert_to_unicode("a^{n+1}"), "aⁿ⁺¹")
            assert_equal(unicode.convert_to_unicode("f^{x-1}"), "fˣ⁻¹")
        end)
        
        it("should handle nested expressions", function()
            assert_equal(unicode.convert_to_unicode("x^{y^2}"), "xʸ²")
            assert_equal(unicode.convert_to_unicode("a^{b^n}"), "aᵇⁿ")
        end)
        
        it("should handle multiple base types", function()
            assert_equal(unicode.convert_to_unicode("\\alpha^2 + \\beta^3"), "α² + β³")
            assert_equal(unicode.convert_to_unicode("x^n \\cdot y^m"), "xⁿ ⋅ yᵐ")
        end)
    end)
    
    describe("Superscript Helper Function", function()
        it("should convert individual characters correctly", function()
            assert_equal(unicode.to_superscript("0"), "⁰")
            assert_equal(unicode.to_superscript("1"), "¹")
            assert_equal(unicode.to_superscript("2"), "²")
            assert_equal(unicode.to_superscript("3"), "³")
            assert_equal(unicode.to_superscript("4"), "⁴")
            assert_equal(unicode.to_superscript("5"), "⁵")
            assert_equal(unicode.to_superscript("6"), "⁶")
            assert_equal(unicode.to_superscript("7"), "⁷")
            assert_equal(unicode.to_superscript("8"), "⁸")
            assert_equal(unicode.to_superscript("9"), "⁹")
        end)
        
        it("should convert letters correctly", function()
            assert_equal(unicode.to_superscript("n"), "ⁿ")
            assert_equal(unicode.to_superscript("i"), "ⁱ")
            assert_equal(unicode.to_superscript("x"), "ˣ")
            assert_equal(unicode.to_superscript("y"), "ʸ")
        end)
        
        it("should handle multi-character strings", function()
            assert_equal(unicode.to_superscript("123"), "¹²³")
            assert_equal(unicode.to_superscript("abc"), "ᵃᵇᶜ")
            assert_equal(unicode.to_superscript("2n"), "²ⁿ")
        end)
        
        it("should handle special cases", function()
            assert_equal(unicode.to_superscript("π"), "ᵖⁱ")
            assert_equal(unicode.to_superscript("iπ"), "ⁱᵖⁱ")
        end)
    end)
    
    describe("Edge Cases", function()
        it("should handle empty superscripts", function()
            assert_equal(unicode.convert_to_unicode("x^{}"), "x")
            assert_equal(unicode.convert_to_unicode("y^{ }"), "y ")
        end)
        
        it("should handle unknown superscript characters", function()
            local result = unicode.to_superscript("@")
            assert_equal(result, "@")
        end)
        
        it("should preserve spacing in complex expressions", function()
            assert_equal(unicode.convert_to_unicode("x^2 + y^3"), "x² + y³")
            assert_equal(unicode.convert_to_unicode("a^{n} b^{m}"), "aⁿ bᵐ")
        end)
    end)
end)
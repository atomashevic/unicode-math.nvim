-- Unit tests for fractions functionality
local unicode = require('unicode-math.backends.unicode')

describe("Fractions", function()
    describe("Unicode Vulgar Fractions", function()
        it("should convert common halves", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{2}"), "½")
        end)
        
        it("should convert thirds", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{3}"), "⅓")
            assert_equal(unicode.convert_to_unicode("\\frac{2}{3}"), "⅔")
        end)
        
        it("should convert quarters", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{4}"), "¼")
            assert_equal(unicode.convert_to_unicode("\\frac{3}{4}"), "¾")
        end)
        
        it("should convert fifths", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{5}"), "⅕")
            assert_equal(unicode.convert_to_unicode("\\frac{2}{5}"), "⅖")
            assert_equal(unicode.convert_to_unicode("\\frac{3}{5}"), "⅗")
            assert_equal(unicode.convert_to_unicode("\\frac{4}{5}"), "⅘")
        end)
        
        it("should convert sixths", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{6}"), "⅙")
            assert_equal(unicode.convert_to_unicode("\\frac{5}{6}"), "⅚")
        end)
        
        it("should convert eighths", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{8}"), "⅛")
            assert_equal(unicode.convert_to_unicode("\\frac{3}{8}"), "⅜")
            assert_equal(unicode.convert_to_unicode("\\frac{5}{8}"), "⅝")
            assert_equal(unicode.convert_to_unicode("\\frac{7}{8}"), "⅞")
        end)
    end)
    
    describe("General Fractions", function()
        it("should convert simple numeric fractions to slash notation", function()
            assert_equal(unicode.convert_to_unicode("\\frac{2}{7}"), "2/7")
            assert_equal(unicode.convert_to_unicode("\\frac{5}{9}"), "5/9")
            assert_equal(unicode.convert_to_unicode("\\frac{11}{13}"), "11/13")
        end)
        
        it("should convert variable fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{x}{y}"), "x/y")
            assert_equal(unicode.convert_to_unicode("\\frac{a}{b}"), "a/b")
            assert_equal(unicode.convert_to_unicode("\\frac{n}{m}"), "n/m")
        end)
        
        it("should convert complex numerator and denominator", function()
            assert_equal(unicode.convert_to_unicode("\\frac{x+1}{y-1}"), "x+1/y-1")
            assert_equal(unicode.convert_to_unicode("\\frac{2x}{3y}"), "2x/3y")
            assert_equal(unicode.convert_to_unicode("\\frac{a+b}{c+d}"), "a+b/c+d")
        end)
        
        it("should handle fractions with Greek letters", function()
            assert_equal(unicode.convert_to_unicode("\\frac{\\alpha}{\\beta}"), "α/β")
            assert_equal(unicode.convert_to_unicode("\\frac{\\pi}{2}"), "π/2")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{\\sigma}"), "1/σ")
        end)
        
        it("should handle fractions with mathematical symbols", function()
            assert_equal(unicode.convert_to_unicode("\\frac{\\infty}{2}"), "∞/2")
            assert_equal(unicode.convert_to_unicode("\\frac{\\pi}{\\sqrt{2}}"), "π/√2")
        end)
    end)
    
    describe("Fractions in Context", function()
        it("should handle fractions in equations", function()
            assert_equal(unicode.convert_to_unicode("y = \\frac{1}{2}x + \\frac{3}{4}"), "y = ½x + ¾")
            assert_equal(unicode.convert_to_unicode("\\frac{x}{2} + \\frac{y}{3} = 1"), "x/2 + y/3 = 1")
        end)
        
        it("should handle multiple fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{2} + \\frac{1}{3} = \\frac{5}{6}"), "½ + ⅓ = ⅚")
            assert_equal(unicode.convert_to_unicode("\\frac{a}{b} \\cdot \\frac{c}{d}"), "a/b ⋅ c/d")
        end)
        
        it("should handle fractions with operations", function()
            assert_equal(unicode.convert_to_unicode("\\frac{a+b}{c} - \\frac{d}{e}"), "a+b/c - d/e")
            assert_equal(unicode.convert_to_unicode("\\frac{x^2}{y} + \\frac{z}{w}"), "x²/y + z/w")
        end)
    end)
    
    describe("Nested and Complex Fractions", function()
        it("should handle simple nested fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{\\frac{1}{2}}{3}"), "½/3")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{\\frac{2}{3}}"), "1/⅔")
        end)
        
        it("should handle fractions with parentheses", function()
            assert_equal(unicode.convert_to_unicode("\\frac{(x+1)}{(y-1)}"), "(x+1)/(y-1)")
            assert_equal(unicode.convert_to_unicode("\\frac{(a+b)^2}{(c-d)}"), "(a+b)²/(c-d)")
        end)
        
        it("should handle fractions with functions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{\\sin(x)}{\\cos(x)}"), "sin(x)/cos(x)")
            assert_equal(unicode.convert_to_unicode("\\frac{f(x)}{g(x)}"), "f(x)/g(x)")
        end)
    end)
    
    describe("Edge Cases", function()
        it("should handle fractions with spaces", function()
            assert_equal(unicode.convert_to_unicode("\\frac{ 1 }{ 2 }"), " 1 / 2 ")
            assert_equal(unicode.convert_to_unicode("\\frac{x + y}{z - w}"), "x + y/z - w")
        end)
        
        it("should handle empty numerator or denominator", function()
            assert_equal(unicode.convert_to_unicode("\\frac{}{2}"), "/2")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{}"), "1/")
            assert_equal(unicode.convert_to_unicode("\\frac{}{}"), "/")
        end)
        
        it("should handle single character fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{x}{2}"), "x/2")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{y}"), "1/y")
        end)
    end)
    
    describe("Real-world Mathematical Examples", function()
        it("should handle calculus fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{dy}{dx}"), "dy/dx")
            assert_equal(unicode.convert_to_unicode("\\frac{\\partial f}{\\partial x}"), "∂f/∂x")
            assert_equal(unicode.convert_to_unicode("\\frac{d^2y}{dx^2}"), "d²y/dx²")
        end)
        
        it("should handle physics fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{1}{2}mv^2"), "½mv²")
            assert_equal(unicode.convert_to_unicode("\\frac{F}{ma}"), "F/ma")
            assert_equal(unicode.convert_to_unicode("v = \\frac{d}{t}"), "v = d/t")
        end)
        
        it("should handle probability fractions", function()
            assert_equal(unicode.convert_to_unicode("P(A) = \\frac{n(A)}{n(S)}"), "P(A) = n(A)/n(S)")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{6}"), "⅙")  -- dice probability
        end)
        
        it("should handle algebraic fractions", function()
            assert_equal(unicode.convert_to_unicode("\\frac{x^2 - 1}{x + 1}"), "x² - 1/x + 1")
            assert_equal(unicode.convert_to_unicode("\\frac{a^2 + 2ab + b^2}{a + b}"), "a² + 2ab + b²/a + b")
        end)
    end)
    
    describe("Mixed Fraction Operations", function()
        it("should handle fractions with superscripts", function()
            assert_equal(unicode.convert_to_unicode("\\left(\\frac{1}{2}\\right)^2"), "(½)²")
            assert_equal(unicode.convert_to_unicode("\\frac{x^2}{y^3}"), "x²/y³")
        end)
        
        it("should handle fractions with subscripts", function()
            assert_equal(unicode.convert_to_unicode("\\frac{x_1}{x_2}"), "x₁/x₂")
            assert_equal(unicode.convert_to_unicode("\\frac{a_{n+1}}{a_n}"), "aₙ₊₁/aₙ")
        end)
        
        it("should handle fractions with roots", function()
            assert_equal(unicode.convert_to_unicode("\\frac{\\sqrt{x}}{2}"), "√x/2")
            assert_equal(unicode.convert_to_unicode("\\frac{1}{\\sqrt{2\\pi}}"), "1/√2π")
        end)
    end)
end)
-- Unit tests for Unicode backend
local unicode = require('unicode-math.backends.unicode')

describe("Unicode Backend", function()
    describe("Basic Setup", function()
        it("should initialize without errors", function()
            local config = { renderer = "unicode" }
            unicode.setup(config)
            assert_not_nil(unicode)
        end)
        
        it("should have render function", function()
            assert_not_nil(unicode.render)
            assert_equal(type(unicode.render), "function")
        end)
        
        it("should have convert_to_unicode function", function()
            assert_not_nil(unicode.convert_to_unicode)
            assert_equal(type(unicode.convert_to_unicode), "function")
        end)
    end)
    
    describe("Basic LaTeX to Unicode Conversion", function()
        it("should handle empty input", function()
            assert_equal(unicode.convert_to_unicode(""), "")
            assert_equal(unicode.convert_to_unicode(nil), "")
        end)
        
        it("should pass through non-LaTeX text", function()
            assert_equal(unicode.convert_to_unicode("hello world"), "hello world")
            assert_equal(unicode.convert_to_unicode("123 + 456"), "123 + 456")
        end)
        
        it("should convert basic Greek letters", function()
            assert_equal(unicode.convert_to_unicode("\\alpha"), "Œ±")
            assert_equal(unicode.convert_to_unicode("\\beta"), "Œ≤")
            assert_equal(unicode.convert_to_unicode("\\gamma"), "Œ≥")
            assert_equal(unicode.convert_to_unicode("\\delta"), "Œ¥")
            assert_equal(unicode.convert_to_unicode("\\epsilon"), "Œµ")
            assert_equal(unicode.convert_to_unicode("\\pi"), "œÄ")
            assert_equal(unicode.convert_to_unicode("\\sigma"), "œÉ")
            assert_equal(unicode.convert_to_unicode("\\omega"), "œâ")
        end)
        
        it("should convert uppercase Greek letters", function()
            assert_equal(unicode.convert_to_unicode("\\Alpha"), "Œë")
            assert_equal(unicode.convert_to_unicode("\\Beta"), "Œí")
            assert_equal(unicode.convert_to_unicode("\\Gamma"), "Œì")
            assert_equal(unicode.convert_to_unicode("\\Delta"), "Œî")
            assert_equal(unicode.convert_to_unicode("\\Pi"), "Œ†")
            assert_equal(unicode.convert_to_unicode("\\Sigma"), "Œ£")
            assert_equal(unicode.convert_to_unicode("\\Omega"), "Œ©")
        end)
        
        it("should convert mathematical operators", function()
            assert_equal(unicode.convert_to_unicode("\\infty"), "‚àû")
            assert_equal(unicode.convert_to_unicode("\\sum"), "‚àë")
            assert_equal(unicode.convert_to_unicode("\\prod"), "‚àè")
            assert_equal(unicode.convert_to_unicode("\\int"), "‚à´")
            assert_equal(unicode.convert_to_unicode("\\partial"), "‚àÇ")
            assert_equal(unicode.convert_to_unicode("\\nabla"), "‚àá")
            assert_equal(unicode.convert_to_unicode("\\sqrt"), "‚àö")
        end)
        
        it("should convert relations", function()
            assert_equal(unicode.convert_to_unicode("\\leq"), "‚â§")
            assert_equal(unicode.convert_to_unicode("\\geq"), "‚â•")
            assert_equal(unicode.convert_to_unicode("\\neq"), "‚â†")
            assert_equal(unicode.convert_to_unicode("\\approx"), "‚âà")
            assert_equal(unicode.convert_to_unicode("\\equiv"), "‚â°")
            assert_equal(unicode.convert_to_unicode("\\sim"), "‚àº")
        end)
        
        it("should convert set theory symbols", function()
            assert_equal(unicode.convert_to_unicode("\\in"), "‚àà")
            assert_equal(unicode.convert_to_unicode("\\notin"), "‚àâ")
            assert_equal(unicode.convert_to_unicode("\\subset"), "‚äÇ")
            assert_equal(unicode.convert_to_unicode("\\supset"), "‚äÉ")
            assert_equal(unicode.convert_to_unicode("\\cap"), "‚à©")
            assert_equal(unicode.convert_to_unicode("\\cup"), "‚à™")
            assert_equal(unicode.convert_to_unicode("\\emptyset"), "‚àÖ")
        end)
        
        it("should convert logic symbols", function()
            assert_equal(unicode.convert_to_unicode("\\forall"), "‚àÄ")
            assert_equal(unicode.convert_to_unicode("\\exists"), "‚àÉ")
            assert_equal(unicode.convert_to_unicode("\\neg"), "¬¨")
            assert_equal(unicode.convert_to_unicode("\\land"), "‚àß")
            assert_equal(unicode.convert_to_unicode("\\lor"), "‚à®")
        end)
        
        it("should convert arrows", function()
            assert_equal(unicode.convert_to_unicode("\\leftarrow"), "‚Üê")
            assert_equal(unicode.convert_to_unicode("\\rightarrow"), "‚Üí")
            assert_equal(unicode.convert_to_unicode("\\leftrightarrow"), "‚Üî")
            assert_equal(unicode.convert_to_unicode("\\Leftarrow"), "‚áê")
            assert_equal(unicode.convert_to_unicode("\\Rightarrow"), "‚áí")
            assert_equal(unicode.convert_to_unicode("\\Leftrightarrow"), "‚áî")
        end)
    end)
    
    describe("Complex Expressions", function()
        it("should handle multiple symbols in one expression", function()
            assert_equal(unicode.convert_to_unicode("\\alpha + \\beta"), "Œ± + Œ≤")
            assert_equal(unicode.convert_to_unicode("\\sum \\alpha \\leq \\infty"), "‚àë Œ± ‚â§ ‚àû")
        end)
        
        it("should handle symbols with word boundaries", function()
            assert_equal(unicode.convert_to_unicode("\\alpha x"), "Œ± x")
            assert_equal(unicode.convert_to_unicode("\\pi r"), "œÄ r")
            assert_equal(unicode.convert_to_unicode("\\theta = 0"), "Œ∏ = 0")
        end)
        
        it("should handle symbols at end of string", function()
            assert_equal(unicode.convert_to_unicode("f(\\alpha)"), "f(Œ±)")
            assert_equal(unicode.convert_to_unicode("\\lim_{x \\to \\infty}"), "lim[x ‚Üí ‚àû]")
        end)
    end)
    
    describe("MathBB Symbols", function()
        it("should convert mathbb symbols", function()
            assert_equal(unicode.convert_to_unicode("\\mathbb{N}"), "‚Ñï")
            assert_equal(unicode.convert_to_unicode("\\mathbb{Z}"), "‚Ñ§")
            assert_equal(unicode.convert_to_unicode("\\mathbb{Q}"), "‚Ñö")
            assert_equal(unicode.convert_to_unicode("\\mathbb{R}"), "‚Ñù")
            assert_equal(unicode.convert_to_unicode("\\mathbb{C}"), "‚ÑÇ")
        end)
        
        it("should handle unknown mathbb symbols", function()
            assert_equal(unicode.convert_to_unicode("\\mathbb{X}"), "ùïè")
            assert_equal(unicode.convert_to_unicode("\\mathbb{Y}"), "ùïê")
        end)
        
        it("should preserve unknown mathbb symbols", function()
            assert_equal(unicode.convert_to_unicode("\\mathbb{unknown}"), "\\mathbb{unknown}")
        end)
    end)
    
    describe("Edge Cases", function()
        it("should handle backslash without command", function()
            assert_equal(unicode.convert_to_unicode("\\"), "\\")
            assert_equal(unicode.convert_to_unicode("\\unknown"), "\\unknown")
        end)
        
        it("should handle mixed LaTeX and regular text", function()
            assert_equal(unicode.convert_to_unicode("The value of \\pi is approximately 3.14"), "The value of œÄ is approximately 3.14")
            assert_equal(unicode.convert_to_unicode("Let \\alpha = 5 and \\beta = 10"), "Let Œ± = 5 and Œ≤ = 10")
        end)
        
        it("should handle consecutive symbols", function()
            assert_equal(unicode.convert_to_unicode("\\alpha\\beta"), "Œ±Œ≤")
            assert_equal(unicode.convert_to_unicode("\\sum\\int"), "‚àë‚à´")
        end)
    end)
end)